// clean maven repo 
task removeRepo(type:Exec) {

    workingDir "$projectDir"
    commandLine 'sh',"${dep_appsh_path}/cleanRepo.sh"
    doLast{
        println "  clean mvn repo jar......"
    }
}

// maven create war
//task mvnbuild(type:Exec,dependsOn:removeRepo) {
task mvnbuild(type:Exec) {

    workingDir "$projectDir"
    // 调用带参数的shell脚本
    executable 'sh'
    args "-c","${dep_appsh_path}/mvnbuild.sh ${source_app_path}/crm-cache-web ${source_app_path}/cache-platmgr"
    doLast{
        println "  compile a project......"
    }
}

//depAppDir = new File("${dep_appwar_path}/${dep_serv_name}")
//bakAppDir = new File("${bak_appwar_path}/${dep_serv_name}")
//
//// check the directory  exists
//task checkAppDir << {
//    if (!depAppDir.isDirectory()) {
//        depAppDir.mkdirs()
//    }
//    if (!bakAppDir.isDirectory()) {
//        bakAppDir.mkdirs()
//    }
//    // do something
//}

// shell bake a project
//task bakeApp(type:Exec) {
task bakeApp(type:Exec,dependsOn:mvnbuild) {

    workingDir "$projectDir"
    executable 'sh'
    args "-c","${dep_appsh_path}/bake.sh ${dep_appwar_path}/${dep_serv_name} ${bak_appwar_path}/${dep_serv_name}"
    doLast{
        println "  bake the project version......"
    }
    
}

// shell bake a project
//task copyProWar(type: Copy) {
task copyProWar(type: Copy,dependsOn:bakeApp) {
    from "${mvn_appwar_path}"
    into "${dep_appwar_path}/${dep_serv_name}"
    include "${target_app_name}.war"
    rename{"${dep_serv_name}.war"}
}
  
// unzip a project war
//task unzipPro(type:Exec) {
task unzipPro(type:Exec,dependsOn:copyProWar) {
    
    workingDir "$projectDir"
    executable 'sh'
    args "-c","${dep_appsh_path}/unzip.sh ${dep_appwar_path}/${dep_serv_name} ${dep_serv_name}.war"
    doLast{
       println "  unzip the war......"
    }
}
       
// config file is replaced
task replaceConf1(type: Copy,dependsOn:unzipPro) {
    println "The config file >>>>>>>>>>>>>>>>>>  测试 <<<<<<<<<<<<<<<<<< is replaced"
    from "${bak_conf_path}/env_conf_bake"
    into "${dep_appwar_path}/${dep_serv_name}/WEB-INF/classes"
    include 'dubbo-client-appconfig.xml'
    doLast{
        println "  The config file >>>>>>>>>>>>>>>>>>  dubbo-client-appconfig.xml <<<<<<<<<<<<<<<<<< is replaced"
    }
}

// config file is replaced
task replaceConf2(type: Copy,dependsOn:unzipPro) {
    from "${bak_conf_path}/env_conf_bake"
    into "${dep_appwar_path}/${dep_serv_name}/WEB-INF/classes"
    include 'redis_cluster.props_bak'
    doLast{
        println "  The config file >>>>>>>>>>>>>>>>>>  redis_cluster.props <<<<<<<<<<<<<<<<<< is replaced"
    }
}

// config file is replaced
task replaceConf3(type: Copy,dependsOn:unzipPro) {
    from "${bak_conf_path}/env_conf_bake"
    into "${dep_appwar_path}/${dep_serv_name}/WEB-INF/classes"
    include 'redis.props'
    doLast{
        println "  The config file >>>>>>>>>>>>>>>>>>  redis.props <<<<<<<<<<<<<<<<<< is replaced"
    }
}

// deploy a project
task deployapp(dependsOn:[replaceConf1,replaceConf2]) << {
    println "  finished to deploy crmweb......"
}
